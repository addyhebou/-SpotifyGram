{"ast":null,"code":"var _jsxFileName = \"/Users/addyhebou/Desktop/#SpotifyGram/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport Trending from \"./components/Trending.js\";\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nconst spotify = new SpotifyWebApi();\n\nconst APIController = function () {\n  const clientId = '';\n  const clientSecret = '';\n\n  const _getToken = async () => {\n    const result = await fetch('http://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n    const data = await result.json();\n    return data.access_token;\n  };\n}();\n\nfunction App() {\n  // State is short term memory for handling variables\n  // Disappears when page refreshes\n  const [{\n    user,\n    token\n  }, dispatch] = useDataLayerValue(); // useEffect: Run code based on a given condition\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if (_token) {\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token\n      });\n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        dispatch({\n          // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: 'SET_USER',\n          // sends SET_USER to reducer.js\n          user: user\n        });\n      });\n      spotify.getUserPlaylists().then(playlists => {\n        dispatch({\n          // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: \"SET_PLAYLISTS\",\n          // sends SET_USER to reducer.js\n          playlists: playlists\n        });\n      });\n      spotify.getPlaylist('37i9dQZEVXcM6XdGAkZACa').then(response => {\n        dispatch({\n          type: \"SET_DISCOVER_WEEKLY\",\n          discover_weekly: response\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, token ? /*#__PURE__*/React.createElement(Player, {\n    spotify: spotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 55\n    }\n  }), console.log(\"ðŸ’œðŸ’œðŸ’œðŸ’œðŸ’œðŸ’œ\")), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/trending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, token ? /*#__PURE__*/React.createElement(Trending, {\n    spotify: spotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 57\n    }\n  }), console.log(\"ðŸ’šðŸ’šðŸ’šðŸ’šðŸ’š\")))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/addyhebou/Desktop/#SpotifyGram/src/App.js"],"names":["React","useEffect","useState","Login","Player","Trending","getTokenFromUrl","SpotifyWebApi","useDataLayerValue","BrowserRouter","Router","Switch","Route","Link","spotify","APIController","clientId","clientSecret","_getToken","result","fetch","method","headers","btoa","body","data","json","access_token","App","user","token","dispatch","hash","window","location","_token","type","setAccessToken","getMe","then","getUserPlaylists","playlists","getPlaylist","response","discover_weekly","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport Trending from \"./components/Trending.js\";\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst spotify = new SpotifyWebApi();\n\nconst APIController = (function(){\n  const clientId = '';\n  const clientSecret = '';\n\n  const _getToken = async () => {\n    const result = await fetch('http://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers:{\n        'Content-Type' : 'application/x-www-form-urlencoded',\n        'Authorization' : 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    const data = await result.json();\n    return data.access_token;\n  }\n}\n\n)();\n\nfunction App() {\n  // State is short term memory for handling variables\n  // Disappears when page refreshes\n  const [{ user, token }, dispatch] = useDataLayerValue();\n\n  // useEffect: Run code based on a given condition\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if(_token){\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      })\n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        dispatch({ // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: 'SET_USER', // sends SET_USER to reducer.js\n          user: user,\n        })\n      });\n\n      spotify.getUserPlaylists().then((playlists) => {\n        dispatch({ // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: \"SET_PLAYLISTS\", // sends SET_USER to reducer.js\n          playlists: playlists,\n        });\n      });\n\n      spotify.getPlaylist('37i9dQZEVXcM6XdGAkZACa').then(response =>{\n        dispatch({\n          type: \"SET_DISCOVER_WEEKLY\",\n          discover_weekly: response,\n        });\n      });\n    }\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path = \"/\">\n            {token ? (<Player spotify={spotify}/>) : (<Login />)}\n            {console.log(\"ðŸ’œðŸ’œðŸ’œðŸ’œðŸ’œðŸ’œ\")}\n          </Route>\n          <Route exact path = \"/trending\">\n            {token ? (<Trending spotify={spotify}/>) : (<Login />)}\n            {console.log(\"ðŸ’šðŸ’šðŸ’šðŸ’šðŸ’š\")}\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}