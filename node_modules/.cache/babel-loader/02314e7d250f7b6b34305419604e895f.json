{"ast":null,"code":"var _jsxFileName = \"/Users/addyhebou/Desktop/#SpotifyGram/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  // State is short term memory for handling variables\n  // Disappears when page refreshes\n  const [token, setToken] = useState(null);\n  const [{}, dispatch] = useDataLayerValue(); // useEffect: Run code based on a given condition\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if (_token) {\n      setToken(_token); // stores token in State\n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        console.log(\"💪🏿\", user);\n        dispatch({\n          // pop the token in to the DataLayr\n          type: 'SET_USER',\n          user: user\n        });\n      });\n    }\n\n    console.log('I HAVE A TOKEN: 🔥', token);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, token ?\n  /*#__PURE__*/\n  // If there is a token\n  React.createElement(Player, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }) :\n  /*#__PURE__*/\n  // Else if there is no token\n  React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/addyhebou/Desktop/#SpotifyGram/src/App.js"],"names":["React","useEffect","useState","Login","Player","getTokenFromUrl","SpotifyWebApi","useDataLayerValue","spotify","App","token","setToken","dispatch","hash","window","location","_token","access_token","setAccessToken","getMe","then","user","console","log","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,MAAMC,OAAO,GAAG,IAAIF,aAAJ,EAAhB;;AAEA,SAASG,GAAT,GAAe;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC,EAAD,EAAKU,QAAL,IAAiBL,iBAAiB,EAAxC,CAJa,CAMb;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,IAAI,GAAGR,eAAe,EAA5B;AACAS,IAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAuB,EAAvB;AACA,UAAMG,MAAM,GAAGH,IAAI,CAACI,YAApB;;AAEA,QAAGD,MAAH,EAAU;AACRL,MAAAA,QAAQ,CAACK,MAAD,CAAR,CADQ,CACS;;AAGjBR,MAAAA,OAAO,CAACU,cAAR,CAAuBF,MAAvB;AAEAR,MAAAA,OAAO,CAACW,KAAR,GAAgBC,IAAhB,CAAqBC,IAAI,IAAI;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AAEAT,QAAAA,QAAQ,CAAC;AAAE;AACTY,UAAAA,IAAI,EAAE,UADC;AAEPH,UAAAA,IAAI,EAAEA;AAFC,SAAD,CAAR;AAID,OAPD;AAQD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCb,KAAlC;AACD,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIA,KAAK;AAAA;AAAK;AACR,sBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG;AAAA;AAEC;AACJ,sBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALN,CADF;AAWD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  // State is short term memory for handling variables\n  // Disappears when page refreshes\n  const [token, setToken] = useState(null)\n  const [{}, dispatch] = useDataLayerValue();\n\n  // useEffect: Run code based on a given condition\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if(_token){\n      setToken(_token) // stores token in State\n\n\n      spotify.setAccessToken(_token);\n\n      spotify.getMe().then(user => {\n        console.log(\"💪🏿\", user);\n\n        dispatch({ // pop the token in to the DataLayr\n          type: 'SET_USER',\n          user: user,\n        })\n      });\n    }\n\n    console.log('I HAVE A TOKEN: 🔥', token);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {\n        token ? ( // If there is a token\n          <Player />\n        ) : ( // Else if there is no token\n          <Login />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}