{"version":3,"sources":["spotify.js","components/Login.js","components/SidebarOption.tsx","DataLayer.js","components/Sidebar.js","components/Header.tsx","components/SongRow.js","components/Body.js","components/Footer.tsx","components/Player.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","SidebarOption","title","Icon","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Sidebar","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","items","map","playlist","name","Header","user","placeholder","type","Avatar","images","url","display_name","SongRow","track","album","artists","artist","Body","spotify","discover_weekly","description","fontSize","tracks","item","Footer","Grid","container","spacing","xs","Slider","Player","SpotifyWebApi","App","token","dispatch","useEffect","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getMe","then","getUserPlaylists","getPlaylist","response","state","action","console","log","Boolean","hostname","match","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27937e5d.chunk.js","sourcesContent":["\n\n\nexport const authEndpoint = \n\"https://accounts.spotify.com/authorize\";\n\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"c8b5d20bd8bf4e64b2e4bb2c52194a08\";\n\n\nconst scopes = [\n    \"user-read-currently-playing\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-top-read\",\n    \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n    return window.location.hash\n        .substring(1)\n        .split(\"&\")\n        .reduce((initial, item) => {\n            // #accessToken=mysupersecretkey&name=sonny\n            let parts = item.split('=');\n            initial[parts[0]] = \n            decodeURIComponent(parts[1]);\n\n            return initial;\n        }, {}); \n}\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;\n","import React from 'react';\nimport '../Login.css';\nimport { loginUrl } from '../spotify';\n\n\n/*\n    1. Click LOGIN Button\n    2. Redirect to SPOTIFY login page\n    3. Redirect to homepage once logged in\n\n*/\n\nfunction Login() {\n    return (\n        <div className=\"login\">\n            <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt = \"Spotify Logo\"/>\n            <a href = {loginUrl}>update 2 my guy</a>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport \"../SidebarOption.css\";\n\nfunction SidebarOption({ title, Icon } : {title:string, Icon:any}) {\n    return (\n        <div className = \"sidebarOption\">\n            {Icon && <Icon className = \"sidebarOption_icon\"/>}\n            {Icon ? <h4>{title}</h4> : <p>{title}</p>}\n        </div>\n    );\n}\n\nexport default SidebarOption;\n","import React, { createContext, useContext, useReducer} from \"react\";\n\nexport const DataLayerContext = createContext();\n\nexport const DataLayer = ({ initialState, \n    reducer, children }) => (\n        <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\n            {children}\n        </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react';\nimport \"../Sidebar.css\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport SidebarOption from './SidebarOption.tsx';\nimport { useDataLayerValue } from \"../DataLayer\";\n\nfunction Sidebar() {\n    const [{ playlists }, dispatch] = useDataLayerValue();\n    \n    return (\n        <div className = \"sidebar\">\n            <img className = \"sidebar_logo\" src = \"http://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt = \"Spotify Icon\"></img>\n            <SidebarOption title=\"Home\" Icon={HomeIcon}/>\n            <SidebarOption title=\"Search\" Icon={SearchIcon}/>\n            <SidebarOption title=\"Your Library\" Icon={LibraryMusicIcon}/>\n            \n            <br/>\n            <strong className = \"sidebar_title\">PLAYLISTS</strong>\n            <hr/>\n\n            {playlists?.items?.map((playlist) => (\n                <SidebarOption title={playlist.name}/>\n            ))}\n            <SidebarOption title=\"Emo Rap\" />\n            <SidebarOption title=\"Pop\" />\n            <SidebarOption title=\"Dance\" />\n        </div>\n    );\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport \"../Header.css\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Avatar } from '@material-ui/core';\nimport { useDataLayerValue } from '../DataLayer';\n\n\nfunction Header() {\n    const [{ user }, dispatch] = useDataLayerValue();\n\n    return (\n        <div className=\"header\">\n            <div className=\"header_left\">\n                <SearchIcon />\n                <input \n                    placeholder=\"Search for Artists, Songs, or Playlists\"\n                    type = \"text\"\n                />\n            </div>\n            <div className=\"header_right\">\n                <Avatar src = {user?.images[0]?.url} alt = \"Addy Avator Icon\"/>\n                <h4>{user?.display_name}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport \"../SongRow.css\";\n\nfunction SongRow({ track }) {\n    return (\n        <div className=\"songRow\">\n            <img className = \"songRow_album\" src = {track.album.images[0].url} alt = \"album image\"/>\n            <div className = \"songRow_info\">\n                <h1>{track.name}</h1>\n                <p>\n                    {track.artists.map((artist) => artist.name).join(\", \")}\n                    {track.album.name}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default SongRow\n","import React from 'react';\nimport Header from './Header'\nimport '../Body.css';\nimport { useDataLayerValue } from '../DataLayer';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport SongRow from \"../components/SongRow\";\n\n\nfunction Body({ spotify }) {\n    const [{ user, discover_weekly }, dispatch] = useDataLayerValue();\n\n    return (\n        <div className=\"body\">\n            <Header spotify={spotify}/>\n            <div className = \"body_info\">\n                <img src = {discover_weekly?.images[0].url} /* {user?.images[0]?.url} */ alt = \"\"/>\n                <div className = \"body_infoText\">\n                    <strong>DID FIREBASE UPDAT</strong>\n                    <h2>FIREBASE UPDATE PLEASE</h2>\n                    <p>{discover_weekly?.description}</p>\n                </div>\n            </div>\n\n            <div className = \"body_songs\">\n                <div className = \"body_icons\">\n                    <PlayCircleFilledIcon className = \"body_shuffle\"/>\n                    <FavoriteIcon fontSize=\"large\"/>\n                    <MoreHorizIcon />\n                </div>\n\n                {/* List of songs */}\n                {discover_weekly?.tracks.items.map((item) =>(\n                    <SongRow track = {item.track} />\n                ))}\n\n            </div>\n        </div>\n    );\n}\n\nexport default Body;\n","import React from 'react';\nimport \"../Footer.css\";\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport PlaylistPlayIcon from '@material-ui/icons/PlaylistPlay';\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\nimport { Grid, Slider } from \"@material-ui/core\";\n\nfunction Footer() {\n    return (\n        <div className = \"footer\">\n            <div className = \"footer_left\">\n                <img className = \"footer_albumLogo\" src=\"https://yt3.ggpht.com/a/AATXAJy0wqROWNDaMS8EcoJNvOXxPRc_zqs-Im-1owX6=s400-c-k-c0x00ffffff-no-rj\" alt=\"\"/>\n                <div className=\"footer_songInfo\">\n                    <h4>All Yours</h4>\n                    <p>Saint Steph</p>\n                </div>\n            </div>\n            <div className = \"footer_center\">\n                <ShuffleIcon className = \"footer_green\"/>\n                <SkipPreviousIcon className = \"footer_icon\"/>\n                <PlayCircleOutlineIcon fontSize=\"large\" className = \"footer_icon\"/>\n                <SkipNextIcon className = \"footer_icon\"/>\n                <RepeatIcon className = \"footer_green\"/>\n            </div>\n            <div className = \"footer_right\">\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <PlaylistPlayIcon />\n                    </Grid>\n                    <Grid item>\n                        <VolumeDownIcon />\n                    </Grid>\n                    <Grid item xs>\n                        <Slider />\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Body from './Body.js';\nimport Footer from './Footer.tsx';\nimport \"../Player.css\";\nimport \"../Sidebar.css\";\n\nfunction Player({ spotify }) {\n    return (\n        <div className = \"player\">\n            <div className = \"player_body\">\n                <Sidebar />\n                <Body spotify={spotify}/>\n            </div>\n            \n            <Footer />\n        </div>\n    )\n}\n\nexport default Player;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  // State is short term memory for handling variables\n  // Disappears when page refreshes\n  const [{ user, token }, dispatch] = useDataLayerValue();\n\n  // useEffect: Run code based on a given condition\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if(_token){\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      })\n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        dispatch({ // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: 'SET_USER', // sends SET_USER to reducer.js\n          user: user,\n        })\n      });\n\n      spotify.getUserPlaylists().then((playlists) => {\n        dispatch({ // pop the token (userID) in to the DataLayer, meaning adding the user to the DataLayer\n          type: \"SET_PLAYLISTS\", // sends SET_USER to reducer.js\n          playlists: playlists,\n        });\n      });\n\n      spotify.getPlaylist('37i9dQZEVXcM6XdGAkZACa').then(response =>{\n        dispatch({\n          type: \"SET_DISCOVER_WEEKLY\",\n          discover_weekly: response,\n\n        });\n      });\n\n    }\n\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {\n        token ? ( // If there is a token\n          // console.log(\"OH LETS DO IT\");\n          <Player spotify={spotify}/>\n        ) : ( // Else if there is no token\n          <Login />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","export const initialState = {\n    user: null,\n    playlists: [],\n    playing: false,\n    item: null,\n    // REMOVE AFTER DONE DEVELOPING...YOU WANT TO GO THROUGH THE WHOLE AUTHENTICATION AS PART OF THE PROCESS\n    // token: \"BQALCt34Mp8sG9VugAPPHnKLyxq_cn8P4sc13JeuPOAMFOdZM_SYXw1XQCwErtIf7MPwMUcZYlASx8KszcWKnYcPVmHrPsxgab6NH2wP1z8AIjFCsfoABv_aDu9So1jfDw\",\n};\n\nconst reducer = (state, action) =>{ // state is the status of user, playlists, etc. action is changing one of those items\n    console.log(action); \n\n    // Action -> type, [payload]\n\n    switch(action.type){\n        case \"SET_USER\": // retrieves from the dispatch in App.js\n            return {\n                ...state, // keep existing state, don't alter it\n                user: action.user,\n            };\n        case \"SET_TOKEN\":\n            return {\n                ...state,\n                token: action.token,\n            };\n        case \"SET_PLAYLISTS\":\n            return{\n                ...state,\n                playlists: action.playlists,\n            };\n        case \"SET_DISCOVER_WEEKLY\":\n            return {\n                ...state,\n                discover_weekly: action.discover_weekly,\n            }\n        default:\n            return state;\n    }\n} \n\nexport default reducer;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { DataLayer } from './DataLayer';\nimport reducer, { initialState } from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}